# -*- coding: utf-8 -*-
"""Assignment-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QU4ViWwik95HaBKx6mAlgAJ2PM5HfrkJ

## Importing required libraies
"""

import pandas as pd
import matplotlib.pyplot as plt
import networkx as nx
import math
from collections import Counter

"""## Fetching dataset"""

congress_data = pd.read_csv('/content/drive/MyDrive/Social Network Analysis/congress_edgelist.txt', sep=" ")
facebook_data = pd.read_csv('/content/drive/MyDrive/Social Network Analysis/facebook_combined.txt', sep=" ")
email_data = pd.read_csv('/content/drive/MyDrive/Social Network Analysis/email-Eu-core-department-labels.txt', sep=" ")

congress_data

facebook_data

email_data

"""## Creating 3 Real World graph from the dataset"""

congress_G = nx.from_pandas_edgelist(congress_data, source="node_1", target="node_2", edge_attr="weights", create_using=nx.DiGraph())
edge_weights = [d['weights'] for u, v, d in congress_G.edges(data=True)]
pos = nx.spring_layout(congress_G)
nx.draw(congress_G, pos, node_size=5, node_color = 'red', edge_color = 'black')
# nx.draw_networkx_edge_labels(congress_G, pos, edge_labels=edge_weights, font_size=5)

facebook_G = nx.from_pandas_edgelist(facebook_data, source="node1", target="node2", create_using=nx.Graph())
nx.draw_spring(facebook_G, node_size=5, edge_color = 'black')

email_G = nx.from_pandas_edgelist(email_data, source="Node_1", target="Node_2", create_using=nx.Graph())
nx.draw_spring(email_G, node_size=5, node_color = 'green', edge_color = 'black')

"""## Calculating average degree and creating corresponding synthetic graph"""

degree_values = [v for k, v in congress_G.degree()]
average_degree_congress_G = sum(degree_values)/nx.number_of_nodes(congress_G)
average_degree_congress_G

congress_Gnp = nx.gnp_random_graph(nx.number_of_nodes(congress_G), 0.2, directed=True)
congress_watts = nx.watts_strogatz_graph(nx.number_of_nodes(congress_G), 22, 0.2)

degree_values_Gnp = [v for k, v in congress_Gnp.degree()]
average_degree_congress_Gnp = sum(degree_values_Gnp)/nx.number_of_nodes(congress_Gnp)
degree_values_watts = [v for k, v in congress_watts.degree()]
average_degree_congress_watts = sum(degree_values_watts)/nx.number_of_nodes(congress_watts)

nx.draw_spring(congress_Gnp, node_size=5, node_color = 'red', edge_color = 'black')

nx.draw_spring(congress_watts, node_size=5, node_color = 'red', edge_color = 'black')

degree_values = [v for k, v in facebook_G.degree()]
average_degree_facebook_G = sum(degree_values)/nx.number_of_nodes(facebook_G)
average_degree_facebook_G

facebook_Gnp = nx.gnp_random_graph(nx.number_of_nodes(facebook_G), 0.2, directed=False)
facebook_watts = nx.watts_strogatz_graph(nx.number_of_nodes(facebook_G), 22, 0.2)

degree_values_Gnp = [v for k, v in facebook_Gnp.degree()]
average_degree_facebook_Gnp = sum(degree_values_Gnp)/nx.number_of_nodes(facebook_Gnp)
degree_values_watts = [v for k, v in facebook_watts.degree()]
average_degree_facebook_watts = sum(degree_values_watts)/nx.number_of_nodes(facebook_watts)

nx.draw_spring(facebook_Gnp, node_size=5, edge_color = 'black')

nx.draw_spring(facebook_watts, node_size=5, edge_color = 'black')

degree_values = [v for k, v in email_G.degree()]
average_degree_email_G = sum(degree_values)/nx.number_of_nodes(email_G)
average_degree_email_G

email_Gnp = nx.gnp_random_graph(nx.number_of_nodes(email_G), 0.2, directed=False)
email_watts = nx.watts_strogatz_graph(nx.number_of_nodes(email_G), 22, 0.2)

degree_values_Gnp = [v for k, v in email_Gnp.degree()]
average_degree_email_Gnp = sum(degree_values_Gnp)/nx.number_of_nodes(email_Gnp)
degree_values_watts = [v for k, v in email_watts.degree()]
average_degree_email_watts = sum(degree_values_watts)/nx.number_of_nodes(email_watts)

nx.draw_spring(email_Gnp, node_size=5, node_color='green', edge_color = 'black')

nx.draw_spring(email_watts, node_color='green', node_size=5, edge_color = 'black')

"""## Calculating Degree Centralities of all 9 graphs"""

# Calculate degree centralities
degree_centrality_congress_G = nx.degree_centrality(congress_G)
degree_centrality_congress_Gnp = nx.degree_centrality(congress_Gnp)
degree_centrality_congress_watts = nx.degree_centrality(congress_watts)

# Get degree centrality values
congress_G_Y = list(degree_centrality_congress_G.values())
congress_Gnp_Y = list(degree_centrality_congress_Gnp.values())
congress_watts_Y = list(degree_centrality_congress_watts.values())

# Create subplots
fig, axs = plt.subplots(1, 3, figsize=(18, 6), sharey=True)

# Plot histograms for all three graphs
axs[0].hist(congress_G_Y, bins=30, color='red')
axs[0].set_title('Real world graph')
axs[0].set_xlabel('Degree Centrality')
axs[0].set_ylabel('Frequency')

axs[1].hist(congress_Gnp_Y, bins=30, color='green')
axs[1].set_title('G(n,p) graph')
axs[1].set_xlabel('Degree Centrality')

axs[2].hist(congress_watts_Y, bins=30, color='blue')
axs[2].set_title('Watts-Strogatz graph')
axs[2].set_xlabel('Degree Centrality')

plt.suptitle("Degree Centrality Distribution in Congress Graphs", y=1.05, fontsize=14)
plt.show()

# Calculate degree centralities
degree_centrality_facebook_G = nx.degree_centrality(facebook_G)
degree_centrality_facebook_Gnp = nx.degree_centrality(facebook_Gnp)
degree_centrality_facebook_watts = nx.degree_centrality(facebook_watts)

# Get degree centrality values
facebook_G_Y = list(degree_centrality_facebook_G.values())
facebook_Gnp_Y = list(degree_centrality_facebook_Gnp.values())
facebook_watts_Y = list(degree_centrality_facebook_watts.values())

# Create subplots
fig, axs = plt.subplots(1, 3, figsize=(18, 6), sharey=True)

# Plot histograms for all three graphs
axs[0].hist(facebook_G_Y, bins=30, color='red')
axs[0].set_title('Real world graph')
axs[0].set_xlabel('Degree Centrality')
axs[0].set_ylabel('Frequency')

axs[1].hist(facebook_Gnp_Y, bins=30, color='green')
axs[1].set_title('G(n,p) graph')
axs[1].set_xlabel('Degree Centrality')

axs[2].hist(facebook_watts_Y, bins=30, color='blue')
axs[2].set_title('Watts-Strogatz graph')
axs[2].set_xlabel('Degree Centrality')

plt.suptitle("Degree Centrality Distribution in Facebook Graphs", y=1.05, fontsize=14)
plt.show()

# Calculate degree centralities
degree_centrality_email_G = nx.degree_centrality(email_G)
degree_centrality_email_Gnp = nx.degree_centrality(email_Gnp)
degree_centrality_email_watts = nx.degree_centrality(email_watts)

# Get degree centrality values
email_G_Y = list(degree_centrality_email_G.values())
email_Gnp_Y = list(degree_centrality_email_Gnp.values())
email_watts_Y = list(degree_centrality_email_watts.values())

# Create subplots
fig, axs = plt.subplots(1, 3, figsize=(18, 6), sharey=True)

# Plot histograms for all three graphs
axs[0].hist(email_G_Y, bins=30, color='red')
axs[0].set_title('Real world graph')
axs[0].set_xlabel('Degree Centrality')
axs[0].set_ylabel('Frequency')

axs[1].hist(email_Gnp_Y, bins=30, color='green')
axs[1].set_title('G(n,p) graph')
axs[1].set_xlabel('Degree Centrality')

axs[2].hist(email_watts_Y, bins=30, color='blue')
axs[2].set_title('Watts-Strogatz graph')
axs[2].set_xlabel('Degree Centrality')

plt.suptitle("Degree Centrality Distribution in Email Graphs", y=1.05, fontsize=14)
plt.show()

"""## Calculating Betweenness Centralities of all 9 graphs"""

# Calculate betweenness centralities
betweenness_centrality_congress_G = nx.betweenness_centrality(congress_G, weight='weights')
betweenness_centrality_congress_Gnp = nx.betweenness_centrality(congress_Gnp, weight='weights')
betweenness_centrality_congress_watts = nx.betweenness_centrality(congress_watts, weight='weights')

# Get betweenness centrality values
congress_G_Y = list(betweenness_centrality_congress_G.values())
congress_Gnp_Y = list(betweenness_centrality_congress_Gnp.values())
congress_watts_Y = list(betweenness_centrality_congress_watts.values())

# Create subplots
fig, axs = plt.subplots(1, 3, figsize=(18, 6), sharey=True)

# Plot histograms for all three graphs
axs[0].hist(congress_G_Y, bins=30, color='red')
axs[0].set_title('Real world graph')
axs[0].set_xlabel('Betweenness Centrality')
axs[0].set_ylabel('Frequency')

axs[1].hist(congress_Gnp_Y, bins=30, color='green')
axs[1].set_title('G(n,p) graph')
axs[1].set_xlabel('Betweenness Centrality')

axs[2].hist(congress_watts_Y, bins=30, color='blue')
axs[2].set_title('Watts-Strogatz graph')
axs[2].set_xlabel('Betweenness Centrality')

plt.suptitle("Betweenness Centrality Distribution in Congress Graphs", y=1.05, fontsize=14)
plt.show()

# Calculate betweenness centralities
betweenness_centrality_facebook_G = nx.betweenness_centrality(facebook_G)
betweenness_centrality_facebook_Gnp = nx.betweenness_centrality(facebook_Gnp)
betweenness_centrality_facebook_watts = nx.betweenness_centrality(facebook_watts)

# Get betweenness centrality values
facebook_G_Y = list(betweenness_centrality_facebook_G.values())
facebook_Gnp_Y = list(betweenness_centrality_facebook_Gnp.values())
facebook_watts_Y = list(betweenness_centrality_facebook_watts.values())

# Create subplots
fig, axs = plt.subplots(1, 3, figsize=(18, 6), sharey=True)

# Plot histograms for all three graphs
axs[0].hist(facebook_G_Y, bins=30, color='red')
axs[0].set_title('Real world graph')
axs[0].set_xlabel('Betweenness Centrality')
axs[0].set_ylabel('Frequency')

axs[1].hist(facebook_Gnp_Y, bins=30, color='green')
axs[1].set_title('G(n,p) graph')
axs[1].set_xlabel('Betweenness Centrality')

axs[2].hist(facebook_watts_Y, bins=30, color='blue')
axs[2].set_title('Watts-Strogatz graph')
axs[2].set_xlabel('Betweenness Centrality')

plt.suptitle("Betweenness Centrality Distribution in Facebook Graphs", y=1.05, fontsize=14)
plt.show()

# Calculate betweenness centralities
betweenness_centrality_email_G = nx.betweenness_centrality(email_G)
betweenness_centrality_email_Gnp = nx.betweenness_centrality(email_Gnp)
betweenness_centrality_email_watts = nx.betweenness_centrality(email_watts)

# Get betweenness centrality values
email_G_Y = list(betweenness_centrality_email_G.values())
email_Gnp_Y = list(betweenness_centrality_email_Gnp.values())
email_watts_Y = list(betweenness_centrality_email_watts.values())

# Create subplots
fig, axs = plt.subplots(1, 3, figsize=(18, 6), sharey=True)

# Plot histograms for all three graphs
axs[0].hist(email_G_Y, bins=30, color='red')
axs[0].set_title('Real world graph')
axs[0].set_xlabel('Betweenness Centrality')
axs[0].set_ylabel('Frequency')

axs[1].hist(email_Gnp_Y, bins=30, color='green')
axs[1].set_title('G(n,p) graph')
axs[1].set_xlabel('Betweenness Centrality')

axs[2].hist(email_watts_Y, bins=30, color='blue')
axs[2].set_title('Watts-Strogatz graph')
axs[2].set_xlabel('Betweenness Centrality')

plt.suptitle("Betweenness Centrality Distribution in Email Graphs", y=1.05, fontsize=14)
plt.show()

"""## Calculating Closeness Centralities of all 9 graphs"""

# Calculate closeness centralities
closeness_centrality_congress_G = nx.closeness_centrality(congress_G, distance='weights')
closeness_centrality_congress_Gnp = nx.closeness_centrality(congress_Gnp, distance='weights')
closeness_centrality_congress_watts = nx.closeness_centrality(congress_watts, distance='weights')

# Get closeness centrality values
congress_G_Y = list(closeness_centrality_congress_G.values())
congress_Gnp_Y = list(closeness_centrality_congress_Gnp.values())
congress_watts_Y = list(closeness_centrality_congress_watts.values())

# Create subplots
fig, axs = plt.subplots(1, 3, figsize=(18, 6), sharey=True)

# Plot histograms for all three graphs
axs[0].hist(congress_G_Y, bins=30, color='red')
axs[0].set_title('Real world graph')
axs[0].set_xlabel('Closeness Centrality')
axs[0].set_ylabel('Frequency')

axs[1].hist(congress_Gnp_Y, bins=30, color='green')
axs[1].set_title('G(n,p) graph')
axs[1].set_xlabel('Closeness Centrality')

axs[2].hist(congress_watts_Y, bins=30, color='blue')
axs[2].set_title('Watts-Strogatz graph')
axs[2].set_xlabel('Closeness Centrality')

plt.suptitle("Closeness Centrality Distribution in Congress Graphs", y=1.05, fontsize=14)
plt.show()

# Calculate closeness centralities
closeness_centrality_facebook_G = nx.closeness_centrality(facebook_G)
closeness_centrality_facebook_Gnp = nx.closeness_centrality(facebook_Gnp)
closeness_centrality_facebook_watts = nx.closeness_centrality(facebook_watts)

# Get closeness centrality values
facebook_G_Y = list(closeness_centrality_facebook_G.values())
facebook_Gnp_Y = list(closeness_centrality_facebook_Gnp.values())
facebook_watts_Y = list(closeness_centrality_facebook_watts.values())

# Create subplots
fig, axs = plt.subplots(1, 3, figsize=(18, 6), sharey=True)

# Plot histograms for all three graphs
axs[0].hist(facebook_G_Y, bins=30, color='red')
axs[0].set_title('Real world graph')
axs[0].set_xlabel('Closeness Centrality')
axs[0].set_ylabel('Frequency')

axs[1].hist(facebook_Gnp_Y, bins=30, color='green')
axs[1].set_title('G(n,p) graph')
axs[1].set_xlabel('Closeness Centrality')

axs[2].hist(facebook_watts_Y, bins=30, color='blue')
axs[2].set_title('Watts-Strogatz graph')
axs[2].set_xlabel('Closeness Centrality')

plt.suptitle("Closeness Centrality Distribution in Facebook Graphs", y=1.05, fontsize=14)
plt.show()

# Calculate closeness centralities
closeness_centrality_email_G = nx.closeness_centrality(email_G)
closeness_centrality_email_Gnp = nx.closeness_centrality(email_Gnp)
closeness_centrality_email_watts = nx.closeness_centrality(email_watts)

# Get closeness centrality values
email_G_Y = list(closeness_centrality_email_G.values())
email_Gnp_Y = list(closeness_centrality_email_Gnp.values())
email_watts_Y = list(closeness_centrality_email_watts.values())

# Create subplots
fig, axs = plt.subplots(1, 3, figsize=(18, 6), sharey=True)

# Plot histograms for all three graphs
axs[0].hist(email_G_Y, bins=30, color='red')
axs[0].set_title('Real world graph')
axs[0].set_xlabel('Closeness Centrality')
axs[0].set_ylabel('Frequency')

axs[1].hist(email_Gnp_Y, bins=30, color='green')
axs[1].set_title('G(n,p) graph')
axs[1].set_xlabel('Closeness Centrality')

axs[2].hist(email_watts_Y, bins=30, color='blue')
axs[2].set_title('Watts-Strogatz graph')
axs[2].set_xlabel('Closeness Centrality')

plt.suptitle("Closeness Centrality Distribution in Email Graphs", y=1.05, fontsize=14)
plt.show()

"""## Calculating Clustering Coefficients of all 9 graphs"""

# Calculate clustering coefficients
clustering_coefficient_congress_G = nx.clustering(congress_G)
clustering_coefficient_congress_Gnp = nx.clustering(congress_Gnp)
clustering_coefficient_congress_watts = nx.clustering(congress_watts)

# Get clustering coefficient values
congress_G_Y = list(clustering_coefficient_congress_G.values())
congress_Gnp_Y = list(clustering_coefficient_congress_Gnp.values())
congress_watts_Y = list(clustering_coefficient_congress_watts.values())

# Create subplots
fig, axs = plt.subplots(1, 3, figsize=(18, 6), sharey=True)

# Plot histograms for all three graphs
axs[0].hist(congress_G_Y, bins=30, color='red')
axs[0].set_title('Real world graph')
axs[0].set_xlabel('Clustering Coefficient')
axs[0].set_ylabel('Frequency')

axs[1].hist(congress_Gnp_Y, bins=30, color='green')
axs[1].set_title('G(n,p) graph')
axs[1].set_xlabel('Clustering Coefficient')

axs[2].hist(congress_watts_Y, bins=30, color='blue')
axs[2].set_title('Watts-Strogatz graph')
axs[2].set_xlabel('Clustering Coefficient')

plt.suptitle("Clustering Coefficient Distribution in Congress Graphs", y=1.05, fontsize=14)
plt.show()

# Calculate clustering coefficients
clustering_coefficient_facebook_G = nx.clustering(facebook_G)
clustering_coefficient_facebook_Gnp = nx.clustering(facebook_Gnp)
clustering_coefficient_facebook_watts = nx.clustering(facebook_watts)

# Get clustering coefficient values
facebook_G_Y = list(clustering_coefficient_facebook_G.values())
facebook_Gnp_Y = list(clustering_coefficient_facebook_Gnp.values())
facebook_watts_Y = list(clustering_coefficient_facebook_watts.values())

# Create subplots
fig, axs = plt.subplots(1, 3, figsize=(18, 6), sharey=True)

# Plot histograms for all three graphs
axs[0].hist(facebook_G_Y, bins=30, color='red')
axs[0].set_title('Real world graph')
axs[0].set_xlabel('Clustering Coefficient')
axs[0].set_ylabel('Frequency')

axs[1].hist(facebook_Gnp_Y, bins=30, color='green')
axs[1].set_title('G(n,p) graph')
axs[1].set_xlabel('Clustering Coefficient')

axs[2].hist(facebook_watts_Y, bins=30, color='blue')
axs[2].set_title('Watts-Strogatz graph')
axs[2].set_xlabel('Clustering Coefficient')

plt.suptitle("Clustering Coefficient Distribution in Facebook Graphs", y=1.05, fontsize=14)
plt.show()

# Calculate clustering coefficients
clustering_coefficient_email_G = nx.clustering(email_G)
clustering_coefficient_email_Gnp = nx.clustering(email_Gnp)
clustering_coefficient_email_watts = nx.clustering(email_watts)

# Get clustering coefficient values
email_G_Y = list(clustering_coefficient_email_G.values())
email_Gnp_Y = list(clustering_coefficient_email_Gnp.values())
email_watts_Y = list(clustering_coefficient_email_watts.values())

# Create subplots
fig, axs = plt.subplots(1, 3, figsize=(18, 6), sharey=True)

# Plot histograms for all three graphs
axs[0].hist(email_G_Y, bins=30, color='red')
axs[0].set_title('Real world graph')
axs[0].set_xlabel('Clustering Coefficient')
axs[0].set_ylabel('Frequency')

axs[1].hist(email_Gnp_Y, bins=30, color='green')
axs[1].set_title('G(n,p) graph')
axs[1].set_xlabel('Clustering Coefficient')

axs[2].hist(email_watts_Y, bins=30, color='blue')
axs[2].set_title('Watts-Strogatz graph')
axs[2].set_xlabel('Clustering Coefficient')

plt.suptitle("Clustering Coefficient Distribution in Email Graphs", y=1.05, fontsize=14)
plt.show()

"""## Calculating Average PathLength of all 9 graphs"""

# Calculate average shortest path length for the largest strongly connected component
largest_strongly_connected_component = max(nx.strongly_connected_components(congress_G), key=len)
average_path_length_congress_G = nx.average_shortest_path_length(congress_G.subgraph(largest_strongly_connected_component))

# Calculate average shortest path length for the largest weakly connected component
largest_weakly_connected_component = max(nx.weakly_connected_components(congress_G), key=len)
average_path_length_congress_Gnp = nx.average_shortest_path_length(congress_Gnp.subgraph(largest_weakly_connected_component))

# Calculate average shortest path length for the largest connected component
largest_connected_component = max(nx.connected_components(congress_watts), key=len)
average_path_length_congress_watts = nx.average_shortest_path_length(congress_watts.subgraph(largest_connected_component))

print("Average path length of the largest strongly connected component of the real-world congress graph is:", average_path_length_congress_G)
print("Average path length of the largest weakly connected component of G(n,p) congress graph is:", average_path_length_congress_Gnp)
print("Average path length of the largest connected component of the Watts-Strogatz congress graph is:", average_path_length_congress_watts)

# Data for the histogram
labels = ['Real-world (Strongly Connected)', 'G(n,p) (Weakly Connected)', 'Watts-Strogatz (Connected)']
values = [average_path_length_congress_G, average_path_length_congress_Gnp, average_path_length_congress_watts]

# Plotting the histogram
plt.figure(figsize=(50, 20))

plt.bar(labels, values, color=['red', 'green', 'blue'])
plt.ylabel('Average Shortest Path Length', fontsize=30)
plt.title('Average Shortest Path Lengths of Largest Connected Components (CONGRESS)', fontsize=30)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.xticks(fontsize=14, rotation=30, ha="right")
plt.show()

average_path_length_facebook_G = nx.average_shortest_path_length(facebook_G)
average_path_length_facebook_Gnp = nx.average_shortest_path_length(facebook_Gnp)
average_path_length_facebook_watts = nx.average_shortest_path_length(facebook_watts)

print("Average path length of the real-world facebook graph is : ", average_path_length_facebook_G)
print("Average path length of the G(n,p) facebook graph is : ", average_path_length_facebook_Gnp)
print("Average path length of the Watts-Strogatz facebook graph is : ", average_path_length_facebook_watts)


# Data for the histogram
labels = ['Real-world', 'G(n,p)', 'Watts-Strogatz']
values = [average_path_length_facebook_G, average_path_length_facebook_Gnp, average_path_length_facebook_watts]

# Plotting the histogram
plt.figure(figsize=(50, 20))

plt.bar(labels, values, color=['red', 'green', 'blue'])
plt.ylabel('Average Shortest Path Length', fontsize=30)
plt.title('Average Shortest Path Lengths of Largest Connected Components(FACEBOOK)', fontsize=30)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.xticks(fontsize=14, rotation=30, ha="right")
plt.show()

# Calculate average path length for the largest connected component
largest_connected_component = max(nx.connected_components(email_G), key=len)
average_path_length_email_G = nx.average_shortest_path_length(email_G.subgraph(largest_connected_component))

# Calculate average path length for the largest connected component
largest_connected_component_Gnp = max(nx.connected_components(email_Gnp), key=len)
average_path_length_email_Gnp = nx.average_shortest_path_length(email_Gnp.subgraph(largest_connected_component_Gnp))

# Calculate average path length for the largest connected component
largest_connected_component_watts = max(nx.connected_components(email_watts), key=len)
average_path_length_email_watts = nx.average_shortest_path_length(email_watts.subgraph(largest_connected_component_watts))

print("Average path length of the largest connected component of the real-world Email graph is:", average_path_length_email_G)
print("Average path length of the largest connected component of G(n,p) Email graph is:", average_path_length_email_Gnp)
print("Average path length of the largest connected component of the Watts-Strogatz Email graph is:", average_path_length_email_watts)

# Data for the histogram
labels = ['Real-world (Largest Connected)', 'G(n,p) (Largest Connected)', 'Watts-Strogatz (Largest Connected)']
values = [average_path_length_email_G, average_path_length_email_Gnp, average_path_length_email_watts]

# Plotting the histogram
plt.figure(figsize=(50, 20))

plt.bar(labels, values, color=['red', 'green', 'blue'])
plt.ylabel('Average Shortest Path Length', fontsize=30)
plt.title('Average Shortest Path Lengths of Largest Connected Components(EMAIL)', fontsize=30)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.xticks(fontsize=14, rotation=30, ha="right")
plt.show()

"""## Summary of all the analysis

# Congress Graph
"""

Nodes = nx.number_of_nodes(congress_G)
Edges = nx.number_of_edges(congress_G)
print("No of nodes:",Nodes , "\nNo of edges:",Edges)

print("Average degree of real world graph:", round(average_degree_congress_G, 4))
print("Average degree of G(n,p) graph:", round(average_degree_congress_Gnp, 4))
print("Average degree of watts strogatz graph:", round(average_degree_congress_watts, 4))

print("Average Degree Centrality value of real world graph:", sum(list(degree_centrality_congress_G.values()))/len(list(degree_centrality_congress_G.values())))
print("Average Degree Centrality value of G(n,p) graph:", sum(list(degree_centrality_congress_Gnp.values()))/len(list(degree_centrality_congress_Gnp.values())))
print("Average Degree Centrality value of watts strogatz graph:", sum(list(degree_centrality_congress_watts.values()))/len(list(degree_centrality_congress_watts.values())))

print("Average Betweenness Centrality value of real world graph:", sum(list(betweenness_centrality_congress_G.values()))/len(list(betweenness_centrality_congress_G.values())))
print("Average Betweenness Centrality value of G(n,p) graph:", sum(list(betweenness_centrality_congress_Gnp.values()))/len(list(betweenness_centrality_congress_Gnp.values())))
print("Average Betweenness Centrality value of watts strogatz graph:", sum(list(betweenness_centrality_congress_watts.values()))/len(list(betweenness_centrality_congress_watts.values())))

print("Average Closeness Centrality value of real world graph:", sum(list(closeness_centrality_congress_G.values()))/len(list(closeness_centrality_congress_G.values())))
print("Average Closeness Centrality value of G(n,p) graph:", sum(list(closeness_centrality_congress_Gnp.values()))/len(list(closeness_centrality_congress_Gnp.values())))
print("Average Closeness Centrality value of watts strogatz graph:", sum(list(closeness_centrality_congress_watts.values()))/len(list(closeness_centrality_congress_watts.values())))

print("Average Clustering Cofficient value of real world graph:", nx.average_clustering(congress_G))
print("Average Clustering Cofficient value of G(n,p) graph:", nx.average_clustering(congress_Gnp))
print("Average Clustering Cofficient value of watts strogatz graph:", nx.average_clustering(congress_watts))

"""# Facebook Graph"""

Nodes = nx.number_of_nodes(facebook_G)
Edges = nx.number_of_edges(facebook_G)
print("No of nodes:",Nodes , "\nNo of edges:",Edges)

print("Average degree of real world graph:", round(average_degree_facebook_G, 4))
print("Average degree of G(n,p) graph:", round(average_degree_facebook_Gnp, 4))
print("Average degree of watts strogatz graph:", round(average_degree_facebook_watts, 4))

print("Average Degree Centrality value of real world graph:", sum(list(degree_centrality_facebook_G.values()))/len(list(degree_centrality_facebook_G.values())))
print("Average Degree Centrality value of G(n,p) graph:", sum(list(degree_centrality_facebook_Gnp.values()))/len(list(degree_centrality_facebook_Gnp.values())))
print("Average Degree Centrality value of watts strogatz graph:", sum(list(degree_centrality_facebook_watts.values()))/len(list(degree_centrality_facebook_watts.values())))

print("Average Betweenness Centrality value of real world graph:", sum(list(betweenness_centrality_facebook_G.values()))/len(list(betweenness_centrality_facebook_G.values())))
print("Average Betweenness Centrality value of G(n,p) graph:", sum(list(betweenness_centrality_facebook_Gnp.values()))/len(list(betweenness_centrality_facebook_Gnp.values())))
print("Average Betweenness Centrality value of watts strogatz graph:", sum(list(betweenness_centrality_facebook_watts.values()))/len(list(betweenness_centrality_facebook_watts.values())))

print("Average Closeness Centrality value of real world graph:", sum(list(closeness_centrality_facebook_G.values()))/len(list(closeness_centrality_facebook_G.values())))
print("Average Closeness Centrality value of G(n,p) graph:", sum(list(closeness_centrality_facebook_Gnp.values()))/len(list(closeness_centrality_facebook_Gnp.values())))
print("Average Closeness Centrality value of watts strogatz graph:", sum(list(closeness_centrality_facebook_watts.values()))/len(list(closeness_centrality_facebook_watts.values())))

print("Average Clustering Cofficient value of real world graph:", nx.average_clustering(facebook_G))
print("Average Clustering Cofficient value of G(n,p) graph:", nx.average_clustering(facebook_Gnp))
print("Average Clustering Cofficient value of watts strogatz graph:", nx.average_clustering(facebook_watts))

"""# Emali Graph"""

Nodes = nx.number_of_nodes(email_G)
Edges = nx.number_of_edges(email_G)
print("No of nodes:",Nodes , "\nNo of edges:",Edges)

print("Average degree of real world graph:", round(average_degree_email_G, 4))
print("Average degree of G(n,p) graph:", round(average_degree_email_Gnp, 4))
print("Average degree of watts strogatz graph:", round(average_degree_email_watts, 4))

print("Average Degree Centrality value of real world graph:", sum(list(degree_centrality_email_G.values()))/len(list(degree_centrality_email_G.values())))
print("Average Degree Centrality value of G(n,p) graph:", sum(list(degree_centrality_email_Gnp.values()))/len(list(degree_centrality_email_Gnp.values())))
print("Average Degree Centrality value of watts strogatz graph:", sum(list(degree_centrality_email_watts.values()))/len(list(degree_centrality_email_watts.values())))

print("Average Betweenness Centrality value of real world graph:", sum(list(betweenness_centrality_email_G.values()))/len(list(betweenness_centrality_email_G.values())))
print("Average Betweenness Centrality value of G(n,p) graph:", sum(list(betweenness_centrality_email_Gnp.values()))/len(list(betweenness_centrality_email_Gnp.values())))
print("Average Betweenness Centrality value of watts strogatz graph:", sum(list(betweenness_centrality_email_watts.values()))/len(list(betweenness_centrality_email_watts.values())))

print("Average Closeness Centrality value of real world graph:", sum(list(closeness_centrality_email_G.values()))/len(list(closeness_centrality_email_G.values())))
print("Average Closeness Centrality value of G(n,p) graph:", sum(list(closeness_centrality_email_Gnp.values()))/len(list(closeness_centrality_email_Gnp.values())))
print("Average Closeness Centrality value of watts strogatz graph:", sum(list(closeness_centrality_email_watts.values()))/len(list(closeness_centrality_email_watts.values())))

print("Average Clustering Cofficient value of real world graph:", nx.average_clustering(email_G))
print("Average Clustering Cofficient value of G(n,p) graph:", nx.average_clustering(email_Gnp))
print("Average Clustering Cofficient value of watts strogatz graph:", nx.average_clustering(email_watts))